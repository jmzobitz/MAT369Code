% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom-quiver.R, R/phaseplane.R
\docType{data}
\name{geom_quiver}
\alias{geom_quiver}
\alias{GeomQuiver}
\alias{phaseplane}
\title{Quiver plots for ggplot2}
\format{An object of class \code{GeomQuiver} (inherits from \code{GeomSegment}, \code{Geom}, \code{ggproto}, \code{gg}) of length 2.}
\usage{
geom_quiver(mapping = NULL, data = NULL, stat = "quiver",
  position = "identity", center = FALSE, rescale = FALSE,
  vecsize = NULL, na.rm = FALSE, show.legend = NA,
  inherit.aes = TRUE, ...)

GeomQuiver

phaseplane(n_points, x_window, y_window, x_label, y_label, dx, dy)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[=aes]{aes()}} or
\code{\link[=aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[=ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[=fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame.}, and
will be used as the layer data.}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{center}{If \code{FALSE} (the default), the vector lines will start at the specified x and y. If \code{TRUE}, the arrows will be centered about x and y.}

\item{rescale}{If \code{FALSE} (the default), the vectors will not be rescaled. If \code{TRUE}, the vectors given by (u, v) will be rescaled using the \code{scale} function.}

\item{vecsize}{By default (NULL), vectors sizing is automatically determined. If a grid can be identified, they will be scaled to the grid, if not, the vectors will not be scaled. By specifying a numeric input here, the length of all arrows can be adjusted. Setting vecsize to zero will prevent scaling the arrows.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[=borders]{borders()}}.}

\item{n_points}{number of points we evaluate on the grid in both directions}

\item{x_window}{x axis limits.  Must be of the form c(minVal,maxVal)}

\item{y_window}{y axis limits.  Must be of the form c(minVal,maxVal)}

\item{x_label}{x axis label for plot}

\item{y_label}{y axis label for plot}

\item{dx}{a function for the dx/dt = f(x,y)}

\item{dy}{a function for the dy/dt = f(x,y)}

\item{initialCondition}{Listing of initial conditions}
}
\value{
A phase plane diagram of system of differential equations
}
\description{
Displays the direction and length of vectors on a graph.

\code{phaseplane} visualizes the vector field for a one or two dimensional differential equation.
}
\examples{
# Quiver plots of mathematical functions
expand.grid(x=seq(0,pi,pi/12), y=seq(0,pi,pi/12)) \%>\%
  ggplot(aes(x=x,y=y,u=cos(x),v=sin(y))) +
  geom_quiver()

# Removing automatic scaling
ggplot(seals, aes(x=long, y=lat, u=delta_long, v=delta_lat)) +
  geom_quiver(vecsize=NULL) +
  borders("state")

\dontrun{
# Centering arrows is useful for plotting on maps.
library(dplyr)
library(ggmap)
wind_data <- wind \%>\% filter(between(lon, -96, -93) & between(lat, 28.7, 30))
qmplot(lon, lat, data=wind_data, extent="panel", geom = "blank", zoom=8, maptype = "toner-lite") +
  geom_quiver(aes(u=delta_lon, v=delta_lat, colour = spd), center=TRUE)
}

dx <- function(x,y) {
cos(x)
}

dy <- function(x,y) {
 sin(y)
}

phaseplane(20,c(-3,3),c(-3,3),'X','Y',dx,dy)

# For a one dimensional system: dy/dt = f(y).  In this case the xWindow represents time.
# We still need to write dx as a function of x and y

dy <- function(x,y) {
-y
}

phaseplane(20,c(-3,3),c(-3,3),'T','Y',1,dy)

# For a one dimensional non-autonomous system: dy/dt = f(t,y).  In this case the xWindow represents time.
# The in this case, the x coordinate represents time

dy <- function(x,y) {
-cos(x)*y
}

phaseplane(20,c(-3,3),c(-3,3),'T','Y',1,dy)

}
\keyword{datasets}
